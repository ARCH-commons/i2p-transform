from typing import Any, Optional

class Visitable(object):
      pass

class ClauseElement(Visitable):
    __visit_name__ = ...  # type: str
    supports_execution = ...  # type: bool
    bind = ...  # type: Any
    is_selectable = ...  # type: bool
    is_clause_element = ...  # type: bool
    description = ...  # type: Any
    def unique_params(self, *optionaldict, **kwargs): ...
    def params(self, *optionaldict, **kwargs): ...
    def compare(self, other, **kw): ...
    def get_children(self, **kwargs): ...
    def self_group(self, against: Optional[Any] = ...): ...
    # @util.dependencies("sqlalchemy.engine.default")
    # def compile(self, default, bind: Optional[Any] = ..., dialect: Optional[Any] = ..., **kw): ...
    def compile(self, bind: Optional[Any] = ..., dialect: Optional[Any] = ..., **kw): ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __invert__(self): ...
    def __bool__(self): ...
    __nonzero__ = ...  # type: Any

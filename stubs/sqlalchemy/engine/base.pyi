from typing import (
    Any, Generic, List, Optional, Tuple, Type, TypeVar
)
from types import TracebackType

from .result import ResultProxy

_T = TypeVar('_T')

# new in 3.6
class ContextManager(Generic[_T]):
    def __enter__(self) -> _T: ...
    def __exit__(self, exc_type: Optional[Type[BaseException]],
                 exc_val: Optional[Exception],
                 exc_tb: Optional[TracebackType]) -> bool: ...


# Dummy until I figure out something better.
class Connectable:
    pass

class Connection:
    def begin(self) -> 'Transaction': ...
    def execute(self, object: object, *multiparams: Any, **params: Any) -> ResultProxy: ...
    def scalar(self, object: object, *multiparams: Any, **params: Any) -> Any: ...

class Engine(object):
    def execute(self, object: object, *multiparams: Any, **params: Any) -> ResultProxy: ...
    def connect(self) -> Connection: ...

class RowProxy:
    def items(self) -> List[Tuple[Any, Any]]: ...
    def keys(self) -> List[Any]: ...
    def values(self) -> List[Any]: ...
    def __getitem__(self, key: str): ...

class Transaction(ContextManager):
    def commit(self): ...
    def rollback(self): ...

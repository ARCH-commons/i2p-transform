# Stubs for luigi.tools.range (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import luigi

logger = ...  # type: Any

class RangeEvent(luigi.Event):
    COMPLETE_COUNT = ...  # type: str
    COMPLETE_FRACTION = ...  # type: str
    DELAY = ...  # type: str

class RangeBase(luigi.WrapperTask):
    of = ...  # type: Any
    of_params = ...  # type: Any
    start = ...  # type: Any
    stop = ...  # type: Any
    reverse = ...  # type: Any
    task_limit = ...  # type: Any
    now = ...  # type: Any
    param_name = ...  # type: Any
    @property
    def of_cls(self): ...
    def datetime_to_parameter(self, dt): ...
    def parameter_to_datetime(self, p): ...
    def datetime_to_parameters(self, dt): ...
    def parameters_to_datetime(self, p): ...
    def moving_start(self, now): ...
    def moving_stop(self, now): ...
    def finite_datetimes(self, finite_start, finite_stop): ...
    def requires(self): ...
    def missing_datetimes(self, finite_datetimes): ...

class RangeDailyBase(RangeBase):
    start = ...  # type: Any
    stop = ...  # type: Any
    days_back = ...  # type: Any
    days_forward = ...  # type: Any
    def datetime_to_parameter(self, dt): ...
    def parameter_to_datetime(self, p): ...
    def datetime_to_parameters(self, dt): ...
    def parameters_to_datetime(self, p): ...
    def moving_start(self, now): ...
    def moving_stop(self, now): ...
    def finite_datetimes(self, finite_start, finite_stop): ...

class RangeHourlyBase(RangeBase):
    start = ...  # type: Any
    stop = ...  # type: Any
    hours_back = ...  # type: Any
    hours_forward = ...  # type: Any
    def datetime_to_parameter(self, dt): ...
    def parameter_to_datetime(self, p): ...
    def datetime_to_parameters(self, dt): ...
    def parameters_to_datetime(self, p): ...
    def moving_start(self, now): ...
    def moving_stop(self, now): ...
    def finite_datetimes(self, finite_start, finite_stop): ...

class RangeByMinutesBase(RangeBase):
    start = ...  # type: Any
    stop = ...  # type: Any
    minutes_back = ...  # type: Any
    minutes_forward = ...  # type: Any
    minutes_interval = ...  # type: Any
    def datetime_to_parameter(self, dt): ...
    def parameter_to_datetime(self, p): ...
    def datetime_to_parameters(self, dt): ...
    def parameters_to_datetime(self, p): ...
    def moving_start(self, now): ...
    def moving_stop(self, now): ...
    def finite_datetimes(self, finite_start, finite_stop): ...

def most_common(items): ...
def infer_bulk_complete_from_fs(datetimes, datetime_to_task, datetime_to_re): ...

class RangeDaily(RangeDailyBase):
    def missing_datetimes(self, finite_datetimes): ...

class RangeHourly(RangeHourlyBase):
    def missing_datetimes(self, finite_datetimes): ...

class RangeByMinutes(RangeByMinutesBase):
    def missing_datetimes(self, finite_datetimes): ...
